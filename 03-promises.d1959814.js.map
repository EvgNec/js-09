{"mappings":"AAAAA,QAAQC,IAAI,mBAEF,IAAIC,SAAQ,SAACC,EAASC,GAC9BC,YAAW,WACTL,QAAQC,IAAI,uBAMZE,EALoB,CAClBG,OAAQ,MACRC,KAAM,KACNC,OAAQ,W,GAGT,I,IAGHC,MAAK,SAAAC,GACL,OAAO,IAAIR,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACTK,EAAKC,UAAW,EAChBR,EAAQO,E,GACP,I,OAEJD,MAAK,SAAAG,GAGN,OAFAZ,QAAQC,IAAI,gBAAiBW,GAC7BA,EAAWC,aAAc,EAClBD,C,IAENH,MAAK,SAAAC,GACJV,QAAQC,IAAI,iBAAkBS,E,IAE/BI,OAAM,SAAAC,GACLf,QAAQC,IAAI,MAAOc,E,IAEpBC,SAAQ,WACHhB,QAAQC,IAAI,U","sources":["src/js/03-promises.js"],"sourcesContent":["console.log('Starting server');\n\nconst p = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    console.log('Preparing server...');\n    const backendData = {\n      server: 'aws',\n      port: 1234,\n      status: 'running',\n    };\n    resolve(backendData);\n  }, 2000);\n});\n\np.then(data => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      data.modified = true;\n      resolve(data);\n    }, 2000);\n  });\n}).then(clientData => {\n  console.log('Data received', clientData);\n  clientData.fromPromise = true;\n  return clientData;\n})\n  .then(data => {\n    console.log('Data received2', data);\n  })\n  .catch(err => {\n    console.log('err', err)\n  })\n  .finally(() => {\n        console.log('finally')\n  })\n// import Notiflix from 'notiflix';\n\n// const refs = {\n//   delayInp: document.querySelector('input[name=delay]'),\n//   stepInp: document.querySelector('input[name=step]'),\n//   amountInp: document.querySelector('input[name=amount]'),\n//   form: document.querySelector('.form'),\n// };\n\n// refs.form.addEventListener('submit', e => {\n//   e.preventDefault();\n//   const form = e.currentTarget;\n//   let delay = +form['delay'].value;\n//   const amount = +form['amount'].value;\n//   const step = +form['step'].value;\n//   for (let i = 1; i <= amount; i++) {\n//     const firstDelay = delay;\n//     let newDelay = (delay += step);\n//     createPromise(i, firstDelay, newDelay)\n//       .then(({ position, newDelay }) => {\n//         setTimeout(() => {\n//           Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${newDelay}ms`);\n//         }, newDelay);\n//       })\n//       .catch(({ position, newDelay }) => {\n//         setTimeout(() => {\n//           Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${newDelay}ms`);\n//         }, newDelay);\n//       });\n//   }\n\n// });\n\n// function createPromise(position, newDelay) {\n//   const shouldResolve = Math.random() > 0.5;\n//   return new Promise((resolve, reject) => {\n//     if (shouldResolve) {\n//       return resolve({ position, newDelay });\n//     } else {\n//       return reject({ position, newDelay });\n//     }\n//   });\n// }\n"],"names":["console","log","Promise","resolve","reject","setTimeout","server","port","status","then","data","modified","clientData","fromPromise","catch","err","finally"],"version":3,"file":"03-promises.d1959814.js.map"}