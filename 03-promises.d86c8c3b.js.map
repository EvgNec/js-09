{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAuCA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,IACvBL,EACKI,EAAQ,C,SAAEN,E,SAAUC,IAEpBM,EAAO,C,SAAEP,E,SAAUC,K,EA3CnB,CACXO,SAAUC,SAASC,cAAc,qBACjCC,QAASF,SAASC,cAAc,oBAChCE,UAAWH,SAASC,cAAc,sBAClCG,KAAMJ,SAASC,cAAc,WAG1BG,KAAKC,iBAAiB,UAAUC,IACnCA,EAAEC,iBACF,MAAMH,EAAOE,EAAEE,cACf,IAAIC,GAASL,EAAY,MAAEM,MAC3B,MAAMC,GAAUP,EAAa,OAAEM,MACzBE,GAAQR,EAAW,KAAEM,MAC3B,IAAIG,EAAW,EACf,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAC/BC,QAAQC,IAAI,QAASP,GACrBI,GAAY,EACZ,MAAMI,EAAaR,EACHA,GAASG,EACzBtB,EAAcuB,EAAUI,GACrBC,MAAK,EAAC3B,SAAEA,EAAQC,SAAEA,MACjB2B,YAAW,KACTC,EAAAhC,GAASiC,OAAOC,QACd,uBAAqB/B,QAAiBC,MAAa,GAEpDA,EAAS,IAEb+B,OAAM,EAAChC,SAAEA,EAAQC,SAAEA,MAClB2B,YAAW,KACTC,EAAAhC,GAASiC,OAAOC,QACd,sBAAoB/B,QAAeC,MAAa,GAEjDA,EAAS,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delayInp: document.querySelector('input[name=delay]'),\n  stepInp: document.querySelector('input[name=step]'),\n  amountInp: document.querySelector('input[name=amount]'),\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', e => {\n  e.preventDefault();\n  const form = e.currentTarget;\n  let delay = +form['delay'].value;\n  const amount = +form['amount'].value;\n  const step = +form['step'].value;\n  let position = 0;\n  for (let i = 0; i < amount; i++) {\n    console.log('delay', delay);\n    position += 1;\n    const firstDelay = delay;\n    let newDelay = (delay += step);\n    createPromise(position, firstDelay, newDelay)\n      .then(({ position, newDelay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${newDelay}ms`\n          );\n        }, newDelay);\n      })\n      .catch(({ position, newDelay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.success(\n            `❌ Rejected promise ${position} in ${newDelay}ms`\n          );\n        }, newDelay);\n      });\n  }\n});\n\nfunction createPromise(position, newDelay) {\n  const shouldResolve = Math.random() > 0.5;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      return resolve({ position, newDelay });\n    } else {\n      return reject({ position, newDelay });\n    }\n  });\n}\n"],"names":["$1GAPJ","parcelRequire","$47d4ff9957288465$var$createPromise","position","newDelay","shouldResolve","Math","random","Promise","resolve","reject","delayInp","document","querySelector","stepInp","amountInp","form","addEventListener","e","preventDefault","currentTarget","delay","value","amount","step","position1","i","console","log","firstDelay","then","setTimeout","$parcel$interopDefault","Notify","success","catch"],"version":3,"file":"03-promises.d86c8c3b.js.map"}