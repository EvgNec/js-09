{"mappings":"iiBAiDA,IAAAA,EAAAC,EAAA,SAiCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,OAAIL,EACKI,EAAQ,CAAEN,WAAUC,aAEpBM,EAAO,CAAEP,WAAUC,Y,KArCnB,CACXO,SAAUC,SAASC,cAAc,qBACjCC,QAASF,SAASC,cAAc,oBAChCE,UAAWH,SAASC,cAAc,sBAClCG,KAAMJ,SAASC,cAAc,WAG1BG,KAAKC,iBAAiB,UAAU,SAAAC,GACnCA,EAAEC,iBAKF,IAJA,IAAMH,EAAOE,EAAEE,cACXC,GAASL,EAAY,MAAEM,MACrBC,GAAUP,EAAa,OAAEM,MACzBE,GAAQR,EAAW,KAAEM,MAClBG,EAAI,EAAGA,GAAKF,EAAQE,IAAK,CAChC,IAAMC,EAAaL,EACHA,GAASG,EACzBtB,EAAcuB,EAAGC,GACdC,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAQwB,EAARxB,SACjByB,YAAW,WACTC,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAe8B,OAAT7B,EAAS,M,GACxEA,E,IAEJ8B,OAAM,SAAAN,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAQwB,EAARxB,SAClByB,YAAW,WACTC,EAAA9B,GAAS+B,OAAOI,QAAQ,sBAAqCF,OAAf9B,EAAS,QAAe8B,OAAT7B,EAAS,M,GACrEA,E","sources":["src/js/03-promises.js"],"sourcesContent":["// console.log('Starting server');\n\n// const p = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     console.log('Preparing server...');\n//     const backendData = {\n//       server: 'aws',\n//       port: 1234,\n//       status: 'running',\n//     };\n//     resolve(backendData);\n//   }, 2000);\n// });\n\n// p.then(data => {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       data.modified = true;\n//       resolve(data);\n//     }, 2000);\n//   });\n// }).then(clientData => {\n//   console.log('Data received', clientData);\n//   clientData.fromPromise = true;\n//   return clientData;\n// })\n//   .then(data => {\n//     console.log('Data received2', data);\n//   })\n//   .catch(err => {\n//     console.log('err', err)\n//   })\n//   .finally(() => {\n//         console.log('finally')\n//   })\n\n\n// const sleep = ms => {\n//   return new Promise(resolve => {\n//   setTimeout(() => resolve(), ms)\n//   })\n// }\n// sleep(4000).then(() => console.log('After 4000', ' ms'));\n// sleep(3000).then(() => console.log('After 3000', ' ms'));\n\n// Promise.all([sleep(1000), sleep(3000), sleep(5000)]).then(() => console.log('All Promise'));\n// Promise.race([sleep(1000), sleep(3000), sleep(5000)]).then(() => console.log('All Promise'));\n\n\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  delayInp: document.querySelector('input[name=delay]'),\n  stepInp: document.querySelector('input[name=step]'),\n  amountInp: document.querySelector('input[name=amount]'),\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', e => {\n  e.preventDefault();\n  const form = e.currentTarget;\n  let delay = +form['delay'].value;\n  const amount = +form['amount'].value;\n  const step = +form['step'].value;\n  for (let i = 1; i <= amount; i++) {\n    const firstDelay = delay;\n    let newDelay = (delay += step);\n    createPromise(i, firstDelay, newDelay)\n      .then(({ position, newDelay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${newDelay}ms`);\n        }, newDelay);\n      })\n      .catch(({ position, newDelay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${newDelay}ms`);\n        }, newDelay);\n      });\n  }\n\n});\n\nfunction createPromise(position, newDelay) {\n  const shouldResolve = Math.random() > 0.5;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      return resolve({ position, newDelay });\n    } else {\n      return reject({ position, newDelay });\n    }\n  });\n}\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","newDelay","shouldResolve","Math","random","Promise","resolve","reject","delayInp","document","querySelector","stepInp","amountInp","form","addEventListener","e","preventDefault","currentTarget","delay","value","amount","step","i","firstDelay","then","param","setTimeout","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.d142f9e7.js.map"}